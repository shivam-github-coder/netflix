{"version":3,"sources":["css/netflix-logo1.png","axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Row","title","fetchurl","isLargeRow","useState","movies","setmovie","useEffect","a","get","request","console","log","data","results","fetchData","table","className","map","movie","key","id","src","poster_path","backdrop_path","alt","name","API_key","Requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","netflix","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,2C,6QCK5BC,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAQ,iC,MCqCGC,MAhCf,YAA2C,IAA7BC,EAA4B,EAA5BA,MAAMC,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,WAAa,EAEZC,mBAAS,IAFG,mBAE/BC,EAF+B,KAExBC,EAFwB,KAetC,OAXAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0BX,EAAMY,IAAIP,GADpC,cACUQ,EADV,OAEIC,QAAQC,IAAIF,GACZJ,EAASI,EAAQG,KAAKC,SAH1B,kBAIWJ,GAJX,4CADY,uBAAC,WAAD,wBAOZK,KACD,CAACb,IAEJS,QAAQK,MAAMX,GAEV,yBAAKY,UAAU,OACX,4BAAKhB,GAET,yBAAKgB,UAAU,gBACdZ,EAAOa,KAAI,SAAAC,GAAK,OACb,yBAAKC,IAAKD,EAAME,GAChBJ,UAAS,sBAAiBd,GAAc,mBACxCmB,IAAG,UAzBC,wCAyBD,OAAenB,EAAagB,EAAMI,YAAcJ,EAAMK,eAAiBC,IAAKN,EAAMO,aC9B3FC,EAAQ,mCAcCC,EAZE,CACbC,cAAc,8BAAD,OAA+BF,EAA/B,mBACbG,sBAAsB,wBAAD,OAAyBH,EAAzB,sBACrBI,cAAc,4BAAD,OAA6BJ,EAA7B,mBACbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,2BAAD,OAA4BN,EAA5B,mBACjBO,kBAAkB,2BAAD,OAA4BP,EAA5B,mBACjBQ,mBAAmB,2BAAD,OAA4BR,EAA5B,sBAClBS,mBAAmB,2BAAD,OAA4BT,EAA5B,oB,MCkCPU,MAvCf,WAAmB,IAYGC,EAAIC,EAZR,EACWnC,mBAAS,IADpB,mBACPe,EADO,KACDb,EADC,KAgBd,OAbAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0BX,EAAMY,IAAI+B,EAASR,mBAD7C,cACUtB,EADV,OAEIJ,EAASI,EAAQG,KAAKC,QAAQ2B,KAAKC,MAAMD,KAAKE,SAAWjC,EAAQG,KAAKC,QAAQ8B,OAAQ,KAF1F,kBAGWlC,GAHX,4CADY,uBAAC,WAAD,wBAMZK,KACD,IAOC,4BAAQE,UAAU,SAClB4B,MAAO,CAACC,eAAe,QACvBC,gBAAgB,4CAAD,cAA6C5B,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAOK,cAApD,MACfwB,mBAAmB,kBAGnB,yBAAK/B,UAAU,kBACf,wBAAIA,UAAU,iBAAqB,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAQlB,SAAR,OAAiBkB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAOO,QAAxB,OAAgCP,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAO8B,gBACrE,6BACI,4BAAQhC,UAAU,iBAAlB,QACA,4BAAQA,UAAU,iBAAlB,YAEA,wBAAIA,UAAU,uBAjBJqB,EAkBD,OAACnB,QAAD,IAACA,OAAD,EAACA,EAAO+B,SAlBHX,EAkBc,KAjBtB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAASL,EAAID,EAAIa,OAAO,EAAEZ,EAAE,GAAK,MAAQD,KAqBjD,yBAAKrB,UAAU,yB,uBCZZmC,MAtBf,WAAgB,IAAD,EACchD,oBAAS,GADvB,mBACJiD,EADI,KACCC,EADD,KAaX,OAVA/C,qBAAU,WAMN,OALAgD,OAAOC,iBAAiB,UAAS,WAC1BD,OAAOE,QAAU,IAChBH,GAAW,GACTA,GAAW,MAEd,WACHC,OAAOG,oBAAoB,aAEhC,IAEC,yBAAKzC,UAAS,cAASoC,GAAQ,eAC3B,yBAAKpC,UAAU,YACfK,IAAKqC,IACLlC,IAAI,mBCEDmC,MAjBf,WACE,OACE,yBAAK3C,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAKhB,MAAM,oBAAoBC,SAAU0B,EAASE,sBAAuB3B,YAAU,IACnF,kBAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU0B,EAASC,gBAC7C,kBAAC,EAAD,CAAK5B,MAAM,YAAYC,SAAU0B,EAASG,gBAC1C,kBAAC,EAAD,CAAK9B,MAAM,gBAAgBC,SAAU0B,EAASI,oBAC9C,kBAAC,EAAD,CAAK/B,MAAM,gBAAgBC,SAAU0B,EAASK,oBAC9C,kBAAC,EAAD,CAAKhC,MAAM,gBAAgBC,SAAU0B,EAASM,oBAC9C,kBAAC,EAAD,CAAKjC,MAAM,iBAAiBC,SAAU0B,EAASO,qBAC/C,kBAAC,EAAD,CAAKlC,MAAM,gBAAgBC,SAAU0B,EAASQ,uBCP/ByB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,c","file":"static/js/main.40a546e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netflix-logo1.d25db23a.png\";","import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React,{useState,useEffect} from 'react'\r\nimport axios from './axios';\r\nimport './css/Row.css'\r\n\r\n\r\nconst baseurl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title,fetchurl,isLargeRow}) {\r\n\r\n    const [movies,setmovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchurl);\r\n            console.log(request);\r\n            setmovie(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchurl]);\r\n\r\n    console.table(movies)\r\n    return (\r\n        <div className=\"row\">\r\n            <h1>{title}</h1>\r\n\r\n        <div className=\"row__posters\">\r\n        {movies.map(movie =>(\r\n            <img key={movie.id} \r\n            className={`row__poster ${isLargeRow && \"row_posterLarge\"}`} \r\n            src={`${baseurl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n        ))}\r\n\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_key=\"19f84e11932abbc79e6d83f82d6d1045\";\r\n\r\nconst Requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_key}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_key}&with_networks=100`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_key}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_key}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_key}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_key}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_key}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_key}&with_genres=99`,\r\n}\r\n\r\n\r\nexport default Requests;","import React,{useEffect,useState} from 'react'\r\nimport axios from './axios';\r\nimport requests from './Requests';\r\nimport './css/Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie,setmovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchActionMovies);\r\n            setmovie(request.data.results[Math.floor(Math.random() * request.data.results.length -1)]);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"Banner\" \r\n        style={{backgroundSize:\"cover\",\r\n        backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition:\"center center\",\r\n\r\n        }}>\r\n        <div className=\"Banner_content\">\r\n        <h1 className=\"Banner_title\">{movie ?.title || movie?.name || movie?.original_name}</h1>\r\n        <div>\r\n            <button className=\"Banner_button\" >Play</button>\r\n            <button className=\"Banner_button\" >My List</button>\r\n        </div>\r\n            <h1 className=\"Banner_description\">\r\n            {truncate(movie?.overview , 150)}\r\n\r\n            </h1>\r\n        </div>\r\n            <div className=\"Banner--fadeBottom\"  />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useEffect,useState} from 'react'\r\nimport netflix from './css/netflix-logo1.png';\r\nimport './css/Nav.css'\r\n\r\n\r\nfunction Nav() {\r\n    const [show,handleShow] =useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false)\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img className=\"nav__logo\" \r\n            src={netflix}\r\n            alt=\"NETFLIX LOGO\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row'\nimport Requests from './Requests'\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Nav />\n     <Banner />\n     <Row title=\"NETFLIX ORIGINALS\" fetchurl={Requests.fetchNetflixOriginals} isLargeRow/>\n     <Row title=\"Trending Now\" fetchurl={Requests.fetchTrending} />\n     <Row title=\"Top Rated\" fetchurl={Requests.fetchTopRated} />\n     <Row title=\"Action Movies\" fetchurl={Requests.fetchActionMovies} />\n     <Row title=\"Comedy Movies\" fetchurl={Requests.fetchComedyMovies} />\n     <Row title=\"Horror Movies\" fetchurl={Requests.fetchHorrorMovies} />\n     <Row title=\"Romance Movies\" fetchurl={Requests.fetchRomanceMovies} />\n     <Row title=\"Documentaries\" fetchurl={Requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}